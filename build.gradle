apply plugin: 'application'

subprojects {
   repositories { mavenCentral() }
}

def sep = File.separator;

task createBundles {
    def bundles = file("$buildDir/bundles")
    outputs.dir bundles
    doLast {
        bundles.mkdirs()
    }
}

build {
  startScripts.enabled = false
  installDist.enabled = false
  distTar.enabled = false
  distZip.enabled = false

}


task install(dependsOn: ["step_0_Clean", "step_1_BuildPlugins", "step_2_MakeFolders"])

// -------------------------------
//
//           STEPS
//
// -------------------------------


task step_0_Clean()  {
    def cleanTasks = getTasksByName("clean", true);
    cleanTasks.each {
        dependsOn it
    }
}

task step_1_BuildPlugins() {
    subprojects.each {
        def foundTasks = it.getTasksByName("build", true)
        foundTasks.each {
            dependsOn it
        }
    }
}

task step_2_MakeFolders(dependsOn: ["createStartScripts", "installCodegenDist"])

// -------------------------------
//
//           OTHER
//
// -------------------------------

task createStartScripts(type: CreateStartScripts) {
    outputDir = file("$buildDir/bin")
    mainClassName = project(":codegen").ext.mainClassName
    applicationName = 'codegen'
    defaultJvmOpts = ["-Dconfiguration.path=../conf"]
    classpath = files(project(":codegen").configurations.lib,
                      "${project(":codegen").buildDir}/libs/${project(":codegen").name}.jar")
}

distributions {

    codegen {
        baseName = 'codegen'
        contents {

            // DEFINE
            def templateSources = files();
            def templatesMainSourceSet = project(":templates").sourceSets.main;
            templatesMainSourceSet.java.srcDirs.each { templateSources.from(it) }
            templatesMainSourceSet.groovy.srcDirs.each { templateSources.from(it) }

            def plugins = files();
            project(":plugins").subprojects.each {
                plugins.from("${it.buildDir}/libs/${it.name}.jar")
            }

            // COPYSPEC
            from("$buildDir/bin") {
                into "bin"
            }
            from(["${project(":codegen").projectDir}${sep}conf",
                  templatesMainSourceSet.resources.srcDirs]) {
                into "conf"
            }

            from([project(":codegen").configurations.lib,
                  "${project(":codegen").buildDir}/libs/${project(":codegen").name}.jar"]) {
                into "lib"
            }
            from([project(":codegen").configurations.bundle, plugins]) {
                into "bundles"
            }
            from(templateSources) {
                into "templates"
            }
        }
    }
}